package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/azizhack/gql-meetup/entities"
	"github.com/azizhack/gql-meetup/graph/model"
	entities1 "github.com/azizhack/gql-meetup/models"
)

// User is the resolver for the user field.
func (r *meetupResolver) User(ctx context.Context, obj *entities1.Meetup) (*entities1.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// CreateMeetup is the resolver for the createMeetup field.
func (r *mutationResolver) CreateMeetup(ctx context.Context, input model.NewMeetup) (*entities1.Meetup, error) {
	return r.MeetupRepo.CreateMeetup(&entities.Meetup{})
}

// Meetups is the resolver for the meetups field.
func (r *queryResolver) Meetups(ctx context.Context) ([]*entities1.Meetup, error) {
	return r.MeetupRepo.GetMeetups()
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*entities1.User, error) {
	return r.UserRepo.GetUsers()
}

// Meetups is the resolver for the meetups field.
func (r *userResolver) Meetups(ctx context.Context, obj *entities1.User) ([]*entities1.Meetup, error) {
	panic(fmt.Errorf("not implemented: Meetups - meetups"))
}

// Meetup returns MeetupResolver implementation.
func (r *Resolver) Meetup() MeetupResolver { return &meetupResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type meetupResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
